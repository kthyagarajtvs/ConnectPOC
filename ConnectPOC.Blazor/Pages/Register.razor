@page "/register"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IConfiguration Configuration

<div class="login-container">
    <h3>Register</h3>

    <div class="form-group">
        <label>Username</label>
        <input class="form-control" @bind="user.Username" />
    </div>

    <div class="form-group mt-3">
        <label>Email</label>
        <input class="form-control" @bind="user.Email" type="email" />
    </div>

    <div class="form-group mt-3">
        <label>Password</label>
        <input type="password" class="form-control" @bind="password" />
    </div>

    <!-- Error Message -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-2" role="alert">
            @errorMessage
        </div>
    }

    <!-- Success Message -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-2" role="alert">
            @successMessage
        </div>
    }

    <button class="btn btn-primary w-100 mt-4" @onclick="RegisterUser">Register</button>

    <div class="mt-3 text-center">
        <a @onclick="GoToLogin" class="text-primary" style="cursor: pointer;">Back to Login</a>
    </div>
</div>

@code {
    private User user = new User();
    private string password = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private async Task RegisterUser()
    {
        try
        {
            errorMessage = string.Empty;
            successMessage = string.Empty;

            user.PasswordHash = password;
            user.Id = Guid.NewGuid().ToString();
            user.UserId = Guid.NewGuid().ToString();
            user.CreatedAt = DateTime.UtcNow.ToString("o");

            var baseUrl = Configuration["ApiSettings:BaseUrl"];
            var response = await Http.PostAsJsonAsync($"{baseUrl}/api/User/register", user);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "✅ Registration successful! Redirecting to login...";
                await Task.Delay(2000); // Delay before redirect
                NavManager.NavigateTo("/login"); // Navigate to Login Page
            }
            else
            {
                errorMessage = "❌ Registration failed. Please check the details and try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "🚨 Error: " + ex.Message;
            Console.WriteLine($"Exception: {ex}");
        }
    }

    private void GoToLogin()
    {
        NavManager.NavigateTo("/"); // Navigate to Login Page
    }

    public class User
    {
        public string Id { get; set; } = string.Empty;
        public string UserId { get; set; } = string.Empty;
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string PasswordHash { get; set; } = string.Empty;
        public string CreatedAt { get; set; } = string.Empty;
    }
}
